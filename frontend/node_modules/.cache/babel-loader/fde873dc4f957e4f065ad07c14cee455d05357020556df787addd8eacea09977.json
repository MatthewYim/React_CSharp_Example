{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matthew.yim\\\\Desktop\\\\Code\\\\JavaScript\\\\FinShark\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./Components/CardList/CardList\";\nimport Search from \"./Components/Search/Search\";\nimport { searchCompanies } from \"./api\";\nimport ListPortfolio from \"./Components/Portfolio/ListPortfolio/ListPortfolio\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Hero from \"./Components/Hero/Hero\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [search, setSearch] = useState(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\n  const [portfolioValues, setPortfolioValues] = useState([]);\n  const [searchResult, setSearchResult] = useState([]); // API call we made it so it returns either string array or a string\n  const [serverError, setServerError] = useState(null); // Remember the API call that errors returns a string\n\n  const handleSearchChange = e => {\n    setSearch(e.target.value); // going into input and getting value\n    console.log(e);\n  };\n  const onPortfolioCreate = e => {\n    // \"e: any\" turns of type script or type checking portion\n    e.preventDefault();\n    const exists = portfolioValues.find(value => value === e.target[0].value);\n    if (exists) return;\n    const updatedPortfolio = [...portfolioValues, e.target[0].value];\n    setPortfolioValues(updatedPortfolio); // Reason for this, is cuz React doesn't like mutable arrays, wants a new array to re-render\n  };\n  const onPortfolioDelete = e => {\n    e.preventDefault();\n    const removed = portfolioValues.filter(value => {\n      return value !== e.target[0].value;\n    });\n    setPortfolioValues(removed);\n  };\n  const onSearchSubmit = async e => {\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\n    e.preventDefault();\n    const result = await searchCompanies(search);\n    if (typeof result === \"string\") {\n      setServerError(result);\n    } else if (Array.isArray(result.data)) {\n      setSearchResult(result.data);\n    }\n    console.log(searchResult);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearchSubmit: onSearchSubmit,\n      search: search,\n      handleSearchChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListPortfolio, {\n      portfolioValues: portfolioValues,\n      onPortfolioDelete: onPortfolioDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      searchResults: searchResult,\n      onPortfolioCreate: onPortfolioCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), serverError && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: serverError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"htQmLx9YUSQZQ6Vv+XWZHwncaZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","CardList","Search","searchCompanies","ListPortfolio","Navbar","Hero","jsxDEV","_jsxDEV","App","_s","search","setSearch","portfolioValues","setPortfolioValues","searchResult","setSearchResult","serverError","setServerError","handleSearchChange","e","target","value","console","log","onPortfolioCreate","preventDefault","exists","find","updatedPortfolio","onPortfolioDelete","removed","filter","onSearchSubmit","result","Array","isArray","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","searchResults","_c","$RefreshReg$"],"sources":["C:/Users/matthew.yim/Desktop/Code/JavaScript/FinShark/frontend/src/App.tsx"],"sourcesContent":["import { ChangeEvent, SyntheticEvent, useState } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./Components/CardList/CardList\";\nimport Search from \"./Components/Search/Search\";\nimport { searchCompanies } from \"./api\";\nimport { CompanySearch } from \"./company\";\nimport ListPortfolio from \"./Components/Portfolio/ListPortfolio/ListPortfolio\";\nimport { on } from \"process\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Hero from \"./Components/Hero/Hero\";\n\nfunction App() {\n  const [search, setSearch] = useState<string>(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\n  const [portfolioValues, setPortfolioValues] = useState<string[]>([]);\n  const [searchResult, setSearchResult] = useState<CompanySearch[]>([]); // API call we made it so it returns either string array or a string\n  const [serverError, setServerError] = useState<string | null>(null); // Remember the API call that errors returns a string\n\n  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value); // going into input and getting value\n    console.log(e);\n  };\n\n  const onPortfolioCreate = (e: any) => {\n    // \"e: any\" turns of type script or type checking portion\n    e.preventDefault();\n    const exists = portfolioValues.find((value) => value === e.target[0].value);\n    if (exists) return;\n    const updatedPortfolio = [...portfolioValues, e.target[0].value];\n    setPortfolioValues(updatedPortfolio); // Reason for this, is cuz React doesn't like mutable arrays, wants a new array to re-render\n  };\n\n  const onPortfolioDelete = (e: any) => {\n    e.preventDefault();\n    const removed = portfolioValues.filter((value) => {\n      return value !== e.target[0].value;\n    });\n    setPortfolioValues(removed);\n  };\n  const onSearchSubmit = async (e: SyntheticEvent) => {\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\n    e.preventDefault();\n    const result = await searchCompanies(search);\n    if (typeof result === \"string\") {\n      setServerError(result);\n    } else if (Array.isArray(result.data)) {\n      setSearchResult(result.data);\n    }\n    console.log(searchResult);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Hero />\n      <Search\n        onSearchSubmit={onSearchSubmit}\n        search={search}\n        handleSearchChange={handleSearchChange}\n      />\n      <ListPortfolio\n        portfolioValues={portfolioValues}\n        onPortfolioDelete={onPortfolioDelete}\n      />\n      <CardList\n        searchResults={searchResult}\n        onPortfolioCreate={onPortfolioCreate}\n      />\n      {serverError && <h1>{serverError}</h1>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}