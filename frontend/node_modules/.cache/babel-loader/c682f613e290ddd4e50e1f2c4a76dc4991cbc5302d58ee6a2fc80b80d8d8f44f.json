{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matthew.yim\\\\Desktop\\\\Code\\\\JavaScript\\\\FinShark\\\\frontend\\\\src\\\\Pages\\\\SearchPage\\\\SearchPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CardList from \"../../Components/CardList/CardList\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport ListPortfolio from \"../../Components/Portfolio/ListPortfolio/ListPortfolio\";\nimport { searchCompanies } from \"../../api\";\nimport Search from \"../../Components/Search/Search\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchPage = props => {\n  _s();\n  const [search, setSearch] = useState(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\n  const [portfolioValues, setPortfolioValues] = useState([]);\n  const [searchResult, setSearchResult] = useState([]); // API call we made it so it returns either string array or a string\n  const [serverError, setServerError] = useState(null); // Remember the API call that errors returns a string\n\n  const handleSearchChange = e => {\n    setSearch(e.target.value); // going into input and getting value\n    console.log(e);\n  };\n  const onPortfolioCreate = e => {\n    // \"e: any\" turns of type script or type checking portion\n    e.preventDefault();\n    const exists = portfolioValues.find(value => value === e.target[0].value);\n    if (exists) return;\n    const updatedPortfolio = [...portfolioValues, e.target[0].value];\n    setPortfolioValues(updatedPortfolio); // Reason for this, is cuz React doesn't like mutable arrays, wants a new array to re-render\n  };\n  const onPortfolioDelete = e => {\n    e.preventDefault();\n    const removed = portfolioValues.filter(value => {\n      return value !== e.target[0].value;\n    });\n    setPortfolioValues(removed);\n  };\n  const onSearchSubmit = async e => {\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\n    e.preventDefault();\n    const result = await searchCompanies(search);\n    if (typeof result === \"string\") {\n      setServerError(result);\n    } else if (Array.isArray(result.data)) {\n      setSearchResult(result.data);\n    }\n    console.log(searchResult);\n  };\n  /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearchSubmit: onSearchSubmit,\n      search: search,\n      handleSearchChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ListPortfolio, {\n      portfolioValues: portfolioValues,\n      onPortfolioDelete: onPortfolioDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      searchResults: searchResult,\n      onPortfolioCreate: onPortfolioCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), serverError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Unable to connect to API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchPage, \"htQmLx9YUSQZQ6Vv+XWZHwncaZE=\");\n_c = SearchPage;\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","CardList","Navbar","ListPortfolio","searchCompanies","Search","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchPage","props","_s","search","setSearch","portfolioValues","setPortfolioValues","searchResult","setSearchResult","serverError","setServerError","handleSearchChange","e","target","value","console","log","onPortfolioCreate","preventDefault","exists","find","updatedPortfolio","onPortfolioDelete","removed","filter","onSearchSubmit","result","Array","isArray","data","children","fileName","_jsxFileName","lineNumber","columnNumber","searchResults","_c","$RefreshReg$"],"sources":["C:/Users/matthew.yim/Desktop/Code/JavaScript/FinShark/frontend/src/Pages/SearchPage/SearchPage.tsx"],"sourcesContent":["import React, { ChangeEvent, SyntheticEvent, useState } from \"react\";\r\nimport { CompanySearch } from \"../../company\";\r\nimport CardList from \"../../Components/CardList/CardList\";\r\nimport Navbar from \"../../Components/Navbar/Navbar\";\r\nimport ListPortfolio from \"../../Components/Portfolio/ListPortfolio/ListPortfolio\";\r\nimport { searchCompanies } from \"../../api\";\r\nimport Search from \"../../Components/Search/Search\";\r\n\r\ninterface Props {}\r\n\r\nconst SearchPage = (props: Props) => {\r\n  const [search, setSearch] = useState<string>(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\r\n  const [portfolioValues, setPortfolioValues] = useState<string[]>([]);\r\n  const [searchResult, setSearchResult] = useState<CompanySearch[]>([]); // API call we made it so it returns either string array or a string\r\n  const [serverError, setServerError] = useState<string | null>(null); // Remember the API call that errors returns a string\r\n\r\n  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearch(e.target.value); // going into input and getting value\r\n    console.log(e);\r\n  };\r\n\r\n  const onPortfolioCreate = (e: any) => {\r\n    // \"e: any\" turns of type script or type checking portion\r\n    e.preventDefault();\r\n    const exists = portfolioValues.find((value) => value === e.target[0].value);\r\n    if (exists) return;\r\n    const updatedPortfolio = [...portfolioValues, e.target[0].value];\r\n    setPortfolioValues(updatedPortfolio); // Reason for this, is cuz React doesn't like mutable arrays, wants a new array to re-render\r\n  };\r\n\r\n  const onPortfolioDelete = (e: any) => {\r\n    e.preventDefault();\r\n    const removed = portfolioValues.filter((value) => {\r\n      return value !== e.target[0].value;\r\n    });\r\n    setPortfolioValues(removed);\r\n  };\r\n  const onSearchSubmit = async (e: SyntheticEvent) => {\r\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\r\n    e.preventDefault();\r\n    const result = await searchCompanies(search);\r\n    if (typeof result === \"string\") {\r\n      setServerError(result);\r\n    } else if (Array.isArray(result.data)) {\r\n      setSearchResult(result.data);\r\n    }\r\n    console.log(searchResult);\r\n  };\r\n  <>\r\n    <Navbar />\r\n    <Search\r\n      onSearchSubmit={onSearchSubmit}\r\n      search={search}\r\n      handleSearchChange={handleSearchChange}\r\n    />\r\n    <ListPortfolio\r\n      portfolioValues={portfolioValues}\r\n      onPortfolioDelete={onPortfolioDelete}\r\n    />\r\n    <CardList\r\n      searchResults={searchResult}\r\n      onPortfolioCreate={onPortfolioCreate}\r\n    />\r\n    {serverError && <div>Unable to connect to API</div>}\r\n  </>;\r\n};\r\n\r\nexport default SearchPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}