{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matthew.yim\\\\Desktop\\\\Code\\\\JavaScript\\\\FinShark\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./Components/CardList/CardList\";\nimport Search from \"./Components/Search/Search\";\nimport { searchCompanies } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [search, setSearch] = useState(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\n  const [searchResult, setSearchResult] = useState([]); // API call we made it so it returns either string array or a string\n  const [serveError, setServeError] = useState(\"\"); // Remember the API call that errors returns a string\n\n  const handleChange = e => {\n    setSearch(e.target.value); // going into input and getting value\n    console.log(e);\n  };\n  const onClick = async e => {\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\n    const result = await searchCompanies(search);\n    if (typeof result === \"string\") {\n      setServeError(result);\n    } else if (Array.isArray(result.data)) {\n      setSearchResult(result.data);\n    }\n    console.log(searchResult);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onClick: onClick,\n      search: search,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxMSgvKDy2KAlTa8fKHevoC67N8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","CardList","Search","searchCompanies","jsxDEV","_jsxDEV","App","_s","search","setSearch","searchResult","setSearchResult","serveError","setServeError","handleChange","e","target","value","console","log","onClick","result","Array","isArray","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/matthew.yim/Desktop/Code/JavaScript/FinShark/frontend/src/App.tsx"],"sourcesContent":["import { ChangeEvent, SyntheticEvent, useState } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./Components/CardList/CardList\";\nimport Search from \"./Components/Search/Search\";\nimport { searchCompanies } from \"./api\";\n\nfunction App() {\n  const [search, setSearch] = useState<string>(\"\"); // you can have ts either infer it(no generics) or use generics to set type checking\n  const [searchResult, setSearchResult] = useState<CompanySearch[]>([]); // API call we made it so it returns either string array or a string\n  const [serveError, setServeError] = useState<string>(\"\"); // Remember the API call that errors returns a string\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value); // going into input and getting value\n    console.log(e);\n  };\n\n  const onClick = async (e: SyntheticEvent) => {\n    // If you can't get event MouseEvent<HTMLButtonElement, MouseEvent> to work use \"e: SyntheticEvent\"\n    const result = await searchCompanies(search);\n    if (typeof result === \"string\") {\n      setServeError(result);\n    } else if (Array.isArray(result.data)) {\n      setSearchResult(result.data);\n    }\n    console.log(searchResult);\n  };\n\n  return (\n    <div className=\"App\">\n      <Search onClick={onClick} search={search} handleChange={handleChange} />\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAAsCA,QAAQ,QAAQ,OAAO;AAC7D,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,SAASC,eAAe,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAkB,EAAE,CAAC,CAAC,CAAC;EACvE,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;;EAE1D,MAAMc,YAAY,GAAIC,CAAgC,IAAK;IACzDN,SAAS,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3BC,OAAO,CAACC,GAAG,CAACJ,CAAC,CAAC;EAChB,CAAC;EAED,MAAMK,OAAO,GAAG,MAAOL,CAAiB,IAAK;IAC3C;IACA,MAAMM,MAAM,GAAG,MAAMlB,eAAe,CAACK,MAAM,CAAC;IAC5C,IAAI,OAAOa,MAAM,KAAK,QAAQ,EAAE;MAC9BR,aAAa,CAACQ,MAAM,CAAC;IACvB,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,IAAI,CAAC,EAAE;MACrCb,eAAe,CAACU,MAAM,CAACG,IAAI,CAAC;IAC9B;IACAN,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC;EAC3B,CAAC;EAED,oBACEL,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA,CAACH,MAAM;MAACkB,OAAO,EAAEA,OAAQ;MAACZ,MAAM,EAAEA,MAAO;MAACM,YAAY,EAAEA;IAAa;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxEzB,OAAA,CAACJ,QAAQ;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACvB,EAAA,CA3BQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}